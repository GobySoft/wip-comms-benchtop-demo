if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/.git")
   set(PROJECT_VERSION_MAJOR "0")
   set(PROJECT_VERSION_MINOR "1")
   set(PROJECT_VERSION_PATCH "0~alpha1")
   set(PROJECT_VERSION_DATE "2018.07.12")
   set(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
   message("Compiling from release tarball.")
else()
   include(today)
   today(PROJECT_VERSION_DATE)  

   execute_process(COMMAND git describe --tags HEAD
     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
     OUTPUT_VARIABLE PROJECT_GIT_VERSION)
   string(STRIP ${PROJECT_GIT_VERSION} PROJECT_GIT_VERSION)

   string(REPLACE "_" "~" PROJECT_VERSION ${PROJECT_GIT_VERSION})

   execute_process(COMMAND git diff-index --quiet HEAD
     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
     RESULT_VARIABLE PROJECT_DIRTY_REV)
   if(NOT PROJECT_DIRTY_REV EQUAL 0)
     set(PROJECT_VERSION "${PROJECT_VERSION}-dirty")
   endif()

   string(REPLACE "." " " PROJECT_VERSION_SPACES ${PROJECT_VERSION})
   string(REGEX MATCHALL "[0-9]+ |[0-9a-zA-Z~\-]+$" PROJECT_VERSION_LIST ${PROJECT_VERSION_SPACES})

   list(GET PROJECT_VERSION_LIST 0 PROJECT_VERSION_MAJOR)
   list(GET PROJECT_VERSION_LIST 1 PROJECT_VERSION_MINOR)
   list(GET PROJECT_VERSION_LIST 2 PROJECT_VERSION_PATCH)

   string(STRIP ${PROJECT_VERSION_MAJOR} PROJECT_VERSION_MAJOR)
   string(STRIP ${PROJECT_VERSION_MINOR} PROJECT_VERSION_MINOR)   

   message("Compiling in Git clone.")   
endif()

set(PROJECT_SOVERSION "0")
message("Version: ${PROJECT_VERSION}")
message("Shared Library (SO) Version: ${PROJECT_SOVERSION}")
message("Released on ${PROJECT_VERSION_DATE}")
